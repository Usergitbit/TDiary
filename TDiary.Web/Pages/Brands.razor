@page "/brands"
@attribute [Authorize]
@inject IEventService EventService
@inject IEntityQueryService EntityQueryService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NetworkStateService NetworkStateService
@inject ISynchronizationService SynchronizationService

@if (!IsBusy)
{

    <h3>Brands</h3>
    <EditForm Model="Brand">
        <InputText @bind-Value="Brand.Name" />
    </EditForm>

    <button @onclick="Add">Add</button>
    <button @onclick="Add1000">Add1000</button>
    <button @onclick="Get">Get</button>

    @foreach (var brand in BrandsList)
    {
        <div>
            <NavLink href="@($"brand/{brand.Id}")"> @brand.Name</NavLink>
        </div>
    }
}
else
{
    <h3>Busy</h3>
}

@code {
    public Brand Brand { get; set; } = new();
    public List<Brand> BrandsList { get; set; } = new List<Brand>();
    public bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var isOnline = await NetworkStateService.IsOnline();
        if (isOnline)
        {
            var userId = await GetUserId();
            IsBusy = true;
            await SynchronizationService.Synchronize(userId);
            IsBusy = false;
        }
        await Get();
    }

    public async Task Add()
    {
        var userId = await GetUserId();
        Brand.UserId = userId;
        Brand.Id = Guid.NewGuid();
        var addBrandEvent = new Event
        {
            CreatedAt = DateTime.Now,
            CreatedAtUtc = DateTime.UtcNow,
            Data = JsonSerializer.Serialize(Brand),
            Entity = "Brand",
            EventType = EventType.Insert,
            Id = Guid.NewGuid(),
            TimeZone = TimeZoneInfo.Local.Id,
            UserId = userId,
            Version = 1,
            EntityId = Brand.Id
        };
        await EventService.Add(addBrandEvent);
        Brand = new();
        await Get();
    }

    public async Task Add1000()
    {
        //TODO: add bulk event rpc
        for (var i = 0; i < 1000; i++)
        {
            var userId = await GetUserId();
            Brand.UserId = userId;
            Brand.Id = Guid.NewGuid();
            Brand.Name = $"Brand {Brand.Id}";
            var addBrandEvent = new Event
            {
                CreatedAt = DateTime.Now,
                CreatedAtUtc = DateTime.UtcNow,
                Data = JsonSerializer.Serialize(Brand),
                Entity = "Brand",
                EventType = EventType.Insert,
                Id = Guid.NewGuid(),
                TimeZone = TimeZoneInfo.Local.Id,
                UserId = userId,
                Version = 1,
                EntityId = Brand.Id
            };
            await EventService.Add(addBrandEvent);
            Brand = new();
        }
        await Get();
    }

    public async Task Get()
    {

        var userId = await GetUserId();
        var result = await EntityQueryService.GetBrands(userId);
        BrandsList = new List<Brand>(result);
    }

    private async Task<Guid> GetUserId()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims;
        var userIdClaim = claims.FirstOrDefault(c => c.Type == "id").Value;
        var userId = Guid.Parse(userIdClaim);

        return userId;
    }

}
