@page "/fetchdata"
@attribute [Authorize]
@inject IEventService eventService
@inject NavigationManager NavigationManager
@inject NetworkStateService NetworkStateService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Entity</th>
                <th>Type</th>
                <th>Data</th>
                <th>Created at (UTC)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var applicationEvent in forecasts)
            {
                <tr>
                    <td>@applicationEvent.Entity</td>
                    <td>@applicationEvent.EventType.ToString()</td>
                    <td>@applicationEvent.Data</td>
                    <td>@applicationEvent.CreatedAtUtc.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
    @if (Online)
    {
        <div>Network online</div>
    }
    else
    {
        <div>Network offline</div>
    }
}

@code {
    private List<Event> forecasts = new List<Event>();
    public bool Online { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Online = await NetworkStateService.IsOnline();
        //forecasts = await eventService.Get(Guid.Empty, DateTime.MinValue);
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
